@model CategoryModel

@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Category = Nop.Core.Domain.Catalog.Category

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings

@{
    async Task GenerateItemAttribute(string attrname, bool overflowItem)
    {
        var attr = Model.CatalogProductsModel.SpecificationFilter.Attributes.FirstOrDefault(item => attrname == item.Name);
        if (attr == null)
        {
            return;
        }

        <text>
            <div class="pb-4 mb-2">
                <h3 class="h6 text-light">@attr.Name</h3>
                @if (attr.Name == "Županija")
                {
                    <select id="zupanije" class="form-select form-select-light mb-2" data-option-id>
                        <option value="" selected>Izaberi županiju</option>
                        @foreach (var value in attr.Values)
                        {
                            <option value="@value.Id" selected=@value.Selected>
                                @value.Name
                            </option>
                        }
                    </select>
                }
                else
                {
                    if (overflowItem)
                    {
                        <div class="overflow-auto" data-simplebar data-simplebar-auto-hide="false"
                             data-simplebar-inverse style="height: 11rem;">
                            @foreach (var value in attr.Values)
                            {
                                <div class="form-check form-check-light mr-2">
                                    <input class="form-check-input" type="checkbox" id="attribute-option-@value.Id"
                                           data-option-id="@value.Id" checked="@value.Selected">
                                    <label class="form-check-label fs-sm mr-2"
                                           for="attribute-option-@value.Id">@value.Name</label>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        foreach (var value in attr.Values)
                        {
                            <div class="form-check form-check-light mr-2">
                                <input class="form-check-input" type="checkbox" id="attribute-option-@value.Id"
                                       data-option-id="@value.Id" checked="@value.Selected">
                                <label class="form-check-label fs-sm mr-2"
                                       for="attribute-option-@value.Id">@value.Name</label>
                            </div>
                        }
                    }
                }
            </div>
        </text>
    }

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl<Category>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
<!-- Vendor Styles-->
@* <link rel="stylesheet" media="screen" href="Themes/SaljiDalje/Content/vendor/simplebar/dist/simplebar.min.css" asp-exclude-from-bundle="true"/> *@
@{
    NopHtml.AppendCssFileParts("/Themes/SaljiDalje/Content/vendor/tiny-slider/dist/tiny-slider.css", excludeFromBundle: true);
    NopHtml.AppendCssFileParts("/Themes/SaljiDalje/Content/vendor/nouislider/dist/nouislider.min.css", excludeFromBundle: true);
}
<!-- Main Theme Styles + Bootstrap-->
@* <link rel="stylesheet" media="screen" href="Themes/SaljiDalje/Content/css/theme.min.css"/> *@
<!-- Page content-->
<!-- Page container-->
<div class="container mt-5 mb-md-4 py-5">
    <div class="row py-md-1">
        <!-- Filers sidebar (Offcanvas on mobile)-->
        <div class="col-lg-3 pe-xl-4">
            <div class="offcanvas-lg offcanvas-start bg-dark" id="filters-sidebar">
                <div class="offcanvas-header bg-transparent d-flex d-lg-none align-items-center border-bottom border-light">
                    <h2 class="h5 text-light mb-0">Filters</h2>
                    <button class="btn-close btn-close-white" type="button" data-bs-dismiss="offcanvas"
                            data-bs-target="#filters-sidebar"></button>
                </div>
                @{ var allAttr = Model.CatalogProductsModel.SpecificationFilter.Attributes; }
                @if (allAttr != null && allAttr.Select(item => item.Values)
                             .Select(item => item)
                             .SelectMany(item => item)
                             .Any(item => item.Selected))
                {
                    <div id="selection-group"
                         class="offcanvas-header bg-transparent d-block border-bottom border-light pt-4 pt-lg-4 px-lg-0">

                        <div class="pb-0 mb-0">
                            <div class="d-flex align-items-center justify-content-between mb-3">
                                <h3 class="h6 text-light mb-0">Selection</h3>
                                <button class="btn btn-link btn-light fw-normal fs-sm p-0" type="button">Clear all
                                </button>
                            </div>
                            <ul id="selected-list" class="nav nav-pills nav-pills-light flex-row fs-sm mx-0">
                                @foreach (var item in allAttr)
                                {
                                    foreach (var itemInnner in item.Values)
                                    {
                                        if (itemInnner.Selected)
                                        {
                                            <li class="nav-item mb-2 me-2" onclick="handleClick(this)"
                                                data-option-id-selected="@itemInnner.Id">
                                                <button class="nav-link px-3" type="button">@itemInnner.Name
                                                    <i
                                                        class="fi-x fs-xxs ms-2"></i>
                                                </button>
                                            </li>
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                }
                <div class="offcanvas-body py-lg-4">
                    @{ var carStateAttr = Model.CatalogProductsModel.SpecificationFilter.Attributes.FirstOrDefault(item => "Stanje vozila" == item.Name); }
                    @if (carStateAttr != null)
                    {
                        <div class="pb-1 mb-1">
                            <h3 class="h6 text-light">@carStateAttr.Name</h3>
                            <select id="car-state" class="form-select form-select-light mb-2" data-option-id>
                                <option value="" selected>Stanje vozila</option>
                                @foreach (var value in carStateAttr.Values)
                                {
                                    <option value="@value.Id" selected=@value.Selected>
                                        @value.Name
                                    </option>
                                }
                            </select>
                        </div>
                    }

                    @{ await GenerateItemAttribute("Županija", overflowItem: false); }
                    <div class="pb-4 mb-2">
                        <h3 class="h6 text-light">Make &amp; Model</h3>
                        <select class="form-select form-select-light mb-2">
                            <option value="" disabled selected>Any make</option>
                            <option value="Audi">Audi</option>
                            <option value="Infiniti">Infiniti</option>
                            <option value="Honda">Honda</option>
                            <option value="Hyundai">Hyundai</option>
                            <option value="Lexus">Lexus</option>
                            <option value="Mazda">Mazda</option>
                            <option value="Mitsubishi">Mitsubishi</option>
                            <option value="Mercedes-Benz">Mercedes-Benz</option>
                            <option value="Nissan">Nissan</option>
                            <option value="Opel">Opel</option>
                            <option value="Renault">Renault</option>
                            <option value="Toyota">Toyota</option>
                        </select>
                        <select class="form-select form-select-light mb-1">
                            <option value="" disabled selected>Any model</option>
                            <option value="Altima">Altima</option>
                            <option value="Juke">Juke</option>
                            <option value="Leaf">Leaf</option>
                            <option value="Maxima">Maxima</option>
                            <option value="Micra">Micra</option>
                            <option value="Murano">Murano</option>
                            <option value="Note">Note</option>
                            <option value="Pathfinder">Pathfinder</option>
                            <option value="Patrol">Patrol</option>
                        </select>
                    </div>
                    <div class="pb-4 mb-2">
                        <h3 class="h6 text-light pt-1">Year</h3>
                        <div class="d-flex align-items-center">
                            <select id="yearFrom" class="form-select form-select-light w-100"
                                    asp-for="@Model.CatalogProductsModel.YearRangeFilter.SelectedYearRange.From" data-option-id>
                                <option value="" selected>From</option>
                                @foreach (var item in Model.CatalogProductsModel.YearRangeFilter.AvailableYearRange)
                                {
                                    <option value="@item.ToString()">@item.ToString()</option>
                                }
                            </select>
                            <div class="mx-2">&mdash;</div>
                            <select id="yearTo" class="form-select form-select-light w-100"
                                    asp-for="@Model.CatalogProductsModel.YearRangeFilter.SelectedYearRange.To" data-option-id>
                                <option value="" selected>To</option>
                                @foreach (var item in Model.CatalogProductsModel.YearRangeFilter.AvailableYearRange)
                                {
                                    <option value="@item.ToString()">@item.ToString()</option>
                                }
                            </select>
                        </div>
                        <script asp-location="Footer">
                            $(document).ready(function () {
                                let yearFrom = document.getElementById('yearFrom');
                                let yearTo = document.getElementById('yearTo');
                                let selectedValueFrom = yearFrom.value;
                                let selectedValueTo = yearTo.value;

                                yearFrom.addEventListener("input", function () {
                                    selectedValueFrom = this.value;
                                    //CatalogProducts.getProducts();
                                });
                                yearTo.addEventListener("input", function () {
                                    selectedValueTo = this.value;
                                    //CatalogProducts.getProducts();
                                });

                                $(CatalogProducts).on('before', function (e) {
                                    const yearFrom = selectedValueFrom ? selectedValueFrom : null
                                    const yearTo = selectedValueTo ? selectedValueTo : null
                                    const yearRange = yearFrom + '-' + yearTo;
                                    if ((yearFrom || yearTo) && yearRange.length > 0) {
                                        e.payload.urlBuilder
                                            .addParameter('year', yearRange);
                                    }
                                });
                            });
                        </script>
                    </div>
                    <div class="pb-4 mb-2">
                        <h3 class="h6 text-light pt-1">Mileage</h3>
                        <div class="d-flex align-items-center">
                            <input id="mileageFrom" class="form-control form-control-light w-100" type="number" min="0"
                                   step="500"
                                   placeholder="From" asp-for="@Model.CatalogProductsModel.MileageRangeModel.From" data-option-id />
                            <div class="mx-2">&mdash;</div>
                            <input id="mileageTo" class="form-control form-control-light w-100" type="number" min="0"
                                   step="500"
                                   placeholder="To" asp-for="@Model.CatalogProductsModel.MileageRangeModel.To" data-option-id />
                        </div>
                        <script asp-location="Footer">
                            $(document).ready(function () {
                                let mileageFrom = document.getElementById('mileageFrom');
                                let mileageTo = document.getElementById('mileageTo');
                                let inputValueFrom = mileageFrom.value
                                let inputValueTo = mileageTo.value

                                mileageFrom.addEventListener("input", function () {
                                    inputValueFrom = this.value;
                                    //CatalogProducts.getProducts();
                                });
                                mileageTo.addEventListener("input", function () {
                                    inputValueTo = this.value;
                                    //CatalogProducts.getProducts();
                                });

                                $(CatalogProducts).on('before', function (e) {
                                    const inputValueFrom2 = inputValueFrom ? inputValueFrom : null
                                    const inputValueTo2 = inputValueTo ? inputValueTo : null
                                    const mileageRange = inputValueFrom2 + '-' + inputValueTo2;
                                    if ((inputValueFrom2 || inputValueTo2) && mileageRange.length > 0) {
                                        e.payload.urlBuilder
                                            .addParameter('mileage', mileageRange);
                                    }
                                });
                            });
                        </script>
                    </div>

                    <div class="pb-4 mb-2">
                        <h3 class="h6 text-light">Price</h3>
                        <div class="range-slider range-slider-light mb-3"
                             data-start-min="@Model.CatalogProductsModel.PriceRangeFilter.SelectedPriceRange.From"
                             data-start-max="@Model.CatalogProductsModel.PriceRangeFilter.SelectedPriceRange.To"
                             data-min="@Model.CatalogProductsModel.PriceRangeFilter.AvailablePriceRange.From"
                             data-max="@Model.CatalogProductsModel.PriceRangeFilter.AvailablePriceRange.To"
                             data-step="1">
                            <div id="range" class="range-slider-ui"></div>
                            <div class="d-flex align-items-center">
                                <div class="w-50 pe-2">
                                    <input class="form-control form-control-light range-slider-value-min" type="text">
                                </div>
                                <div class="text-muted">&mdash;</div>
                                <div class="w-50 ps-2">
                                    <input class="form-control form-control-light range-slider-value-max" type="text">
                                </div>
                            </div>
                        </div>
                        <script asp-location="Footer">
                            $(document).ready(function () {
                                let range = document.getElementById('range');

                                range.noUiSlider.on('end', function (values, handle) {
                                    CatalogProducts.getProducts();
                                });

                                range.noUiSlider.on('set', function (values, handle) {
                                    CatalogProducts.getProducts();
                                });

                                $(CatalogProducts).on('before', function (e) {
                                    var priceRange = range.noUiSlider.get(true);
                                    if (priceRange && priceRange.length > 0) {
                                        e.payload.urlBuilder
                                            .addParameter('price', priceRange.join('-'));
                                    }
                                });
                            });
                        </script>
                        @{ var attr = Model.CatalogProductsModel.SpecificationFilter.Attributes.FirstOrDefault(item => "Pregovaranje za cijenu" == item.Name); }
                        @if (attr != null)
                        {
                            foreach (var value in attr.Values)
                            {
                                <div class="form-check form-switch form-switch-light">
                                    <input class="form-check-input" type="checkbox" id="attribute-option-@value.Id"
                                           data-option-id="@value.Id" checked="@value.Selected">
                                    <label class="form-check-label fs-sm"
                                           for="attribute-option-@value.Id">@attr.Name</label>
                                </div>
                            }
                        }
                    </div>
                    @{ await GenerateItemAttribute("BodyType", overflowItem: false); }
                    @{ await GenerateItemAttribute("DriveTrain", overflowItem: false); }
                    @{ await GenerateItemAttribute("FuelType", overflowItem: false); }
                    @{ await GenerateItemAttribute("Tranmission", overflowItem: false); }
                    @{ await GenerateItemAttribute("Color", overflowItem: false); }
                    <div class="pb-2">
                        <h3 class="h6 text-light">Sellers</h3>
                        <div class="form-check form-check-light">
                            <input class="form-check-input" type="checkbox" id="dealers">
                            <label class="form-check-label fs-sm" for="dealers">Dealers Only</label>
                        </div>
                        <div class="form-check form-check-light">
                            <input class="form-check-input" type="checkbox" id="private-sellers">
                            <label class="form-check-label fs-sm" for="private-sellers">Private Sellers Only</label>
                        </div>
                    </div>
                    @*@foreach (var attr in Model.CatalogProductsModel.SpecificationFilter.Attributes)
                    {
                        <div class="pb-4 mb-2">
                            <h3 class="h6 text-light">@attr.Name</h3>
                            @if (attr.Name == "Županija")
                            {
                                <select id="zupanije" class="form-select form-select-light mb-2" data-option-id>
                                    <option value="" disabled selected>Select location</option>
                                    @foreach (var value in attr.Values)
                                    {
                                        <option value="@value.Id" selected=@value.Selected>
                                            @value.Name
                                        </option>
                                    }
                                </select>
                            }
                            else
                            {
                                foreach (var value in attr.Values)
                                {
                                    <div class="form-check form-check-light mr-2">
                                        <input class="form-check-input" type="checkbox" id="attribute-option-@value.Id"
                                               data-option-id="@value.Id" checked="@value.Selected">
                                        <label class="form-check-label fs-sm mr-2"
                                               for="attribute-option-@value.Id">@value.Name</label>
                                    </div>
                                }
                            }

                        </div>
                    }*@
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            var $optionEls = $('[data-option-id]');
                            $optionEls.on('input', function (e) {
                                const id = e.target.tagName === "INPUT" ? e.target.getAttribute('data-option-id') : e.target.value;
                                const elementWithValue = document.querySelector(`[data-option-id-selected="${id}"]`);

                                const selectedOptions = Array.from(document.querySelectorAll('[data-option-id]')).reduce((acc, el) => {
                                    if (el.checked) {
                                        const id = el.getAttribute('data-option-id');
                                        const name = document.querySelector(`label[for="attribute-option-${id}"]`).textContent;
                                        acc.push({ Id: id, Name: name });
                                    } else if (el.id === 'zupanije' && el.value && el.value !== '') {
                                        acc.push({ Id: el.value, Name: el.options[el.selectedIndex].text });
                                    } else if (el.id === 'car-state' && el.value && el.value !== '') {
                                        acc.push({ Id: el.value, Name: el.options[el.selectedIndex].text });
                                    } else if (el.id === 'yearFrom' && el.value && el.value !== '') {
                                        acc.push({ Id: el.id, Name: el.options[el.selectedIndex].text });
                                    }
                                    else if (el.id === 'yearTo' && el.value && el.value !== '') {
                                        acc.push({ Id: el.id, Name: el.options[el.selectedIndex].text });
                                    }
                                    else if (el.id === 'mileageFrom' && el.value && el.value !== '') {
                                        acc.push({ Id: el.id, Name: el.value});
                                    }
                                    else if (el.id === 'mileageTo' && el.value && el.value !== '') {
                                        acc.push({ Id: el.id, Name: el.value});
                                    }
                                    return acc;
                                }, []);

                                if (elementWithValue !== null) {
                                    if (document.getElementById('selected-list').children.length === 1){
                                        document.getElementById('selection-group').remove()
                                    }
                                    elementWithValue.remove();
                                } else {
                                    addLiElementAsHtml(selectedOptions)
                                }
                                CatalogProducts.getProducts();
                            });

                            $(CatalogProducts).on('before', function (e) {
                                var selectedOptions = $.map($optionEls, function (el) {
                                    var $optionEl = $(el);
                                    if ($optionEl.is(':checked')) return $optionEl.data('option-id');
                                    if ($optionEl.attr('id') === "zupanije" && $optionEl.val() != null && $optionEl.val() !== "") return $optionEl.val();
                                    if ($optionEl.attr('id') === "car-state" && $optionEl.val() != null && $optionEl.val() !== "") return $optionEl.val();

                                    return null;
                                });

                                if (selectedOptions && selectedOptions.length > 0) {
                                    e.payload.urlBuilder
                                        .addParameter('specs', selectedOptions.join(','));
                                }
                            });
                        });

                        function addLiElementAsHtml(elements) {
                            const ulElement = document.getElementById('filters-sidebar');
                            const selectedList = document.getElementById('selected-list');

                            const items = elements.map(function(item) { 
                              return  `
                                            <li class="nav-item mb-2 me-2" onclick="handleClick(this)" data-option-id-selected="${item.Id}">
                                                    <button class="nav-link px-3" type="button">${item.Name}
                                                        <i class="fi-x fs-xxs ms-2"></i>
                                                    </button>
                                            </li>
                                            `
                            });
                            
                            const htmlString = `<div id="selection-group" class="offcanvas-header bg-transparent d-block border-bottom border-light pt-4 pt-lg-4 px-lg-0">
                                                    <div class="pb-0 mb-0">
                                                        <div  class="d-flex align-items-center justify-content-between mb-3">
                                                          <h3 class="h6 text-light mb-0">Selection</h3>
                                                          <button onclick="clearAllElements()" class="btn btn-link btn-light fw-normal fs-sm px-1 py-2" type="button">Clear all</button>
                                                        </div>
                                                        <ul id="selected-list" class="nav nav-pills nav-pills-light flex-row fs-sm mx-0">
                                                            ${items}
                                                        </ul>
                                                    </div>
                                                </div>
                                              `;
                            if (selectedList !== null) {
                                document.getElementById('selected-list').innerHTML = items.join("");
                            } else {
                                // Get the first child of the parent
                                const firstChild = ulElement.firstElementChild;
                                firstChild.insertAdjacentHTML('afterend', htmlString);
                            }
                        }
                    </script>
                    <script asp-location="Footer">
                        function resetElement(id) { // id can be for example "123" or "yearFrom"
                            const elementIsSelect = document.querySelector(`select option[value="${id}"]:checked`);
                            const elementIsCheckBox = document.querySelector(`[data-option-id="${id}"]`);
                            const elementIsInputNumberOrSelect = document.getElementById(id);
                            
                            if (elementIsCheckBox !== null) {
                                elementIsCheckBox.checked = false;
                                return
                            }
                            if (elementIsSelect !== null) {
                                elementIsSelect.parentElement.selectedIndex = 0;
                                return
                            }
                            if (elementIsInputNumberOrSelect.type === "number") {
                                elementIsInputNumberOrSelect.value = null
                                return
                            }
                            if (elementIsInputNumberOrSelect.nodeName === "SELECT") {
                                elementIsInputNumberOrSelect.selectedIndex = 0
                                return
                            }
                        }

                        function handleClick(clickedElement) {
                            const id = clickedElement.getAttribute('data-option-id-selected');
                            resetElement(id);

                            CatalogProducts.getProducts()
                            
                            if (document.querySelectorAll('[data-option-id-selected]').length === 1) {
                                document.getElementById('selection-group').remove();
                                return
                            }
                            clickedElement.remove();
                        }

                        function clearAllElements(){
                            const parent = document.getElementById('selected-list')
                            for (let i = 0; i < parent.children.length; i++) {
                                const child = parent.children[i];
                                const id = child.getAttribute('data-option-id-selected')
                                resetElement(id)
                            }
                            document.getElementById('selection-group').remove()

                            CatalogProducts.getProducts()
                        }
                    </script>
                </div>
            </div>
        </div>
        <!-- Catalog list view-->
        <div class="col-lg-9">
            <!-- Breadcrumb-->
            <nav class="mb-3 pt-md-2 pt-lg-4" aria-label="Breadcrumb">
                <ol class="breadcrumb breadcrumb-light">
                    <li class="breadcrumb-item">
                        <a href="@Url.RouteUrl("Homepage")"
                           title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                    </li>
                    @foreach (var item in Model.CategoryBreadcrumb.Select((item, index) => (item, index)))
                    {
                        if (item.index < Model.CategoryBreadcrumb.Count - 1)
                        {
                            <li class="breadcrumb-item">
                                <a href="@item.item.SeName">@item.item.Name</a>
                            </li>
                        }
                        else
                        {
                            <li class="breadcrumb-item active" aria-current="page">@item.item.Name</li>
                        }
                    }
                </ol>
            </nav>
            <!-- Page title-->
            <div class="d-flex align-items-center justify-content-between pb-4 mb-2">
                <h1 class="text-light me-3 mb-0">@Model.Name</h1>
                <div class="text-light">
                    <i class="fi-car fs-lg me-2"></i><span
                        class="align-middle" id="total-number">@Model.CatalogProductsModel.TotalItems oglasa</span>
                </div>
            </div>
            @if (Model.SubCategories.Count > 0)
            {
                <ul class="nav nav-pills nav-pills-light flex-row fs-sm mx-0 mb-4">
                    @foreach (var item in Model.SubCategories)
                    {
                        <li class="nav-item mb-2 me-2">
                            <a class="nav-link px-3" href="@(Url.RouteUrl<Category>(new { SeName = item.SeName }))"
                               title="@item.PictureModel.Title">
                                @item.Name
                            </a>
                        </li>
                    }
                </ul>
            }
            <!-- Sorting + View-->
            <div class="d-sm-flex align-items-center justify-content-between pb-4 mb-2">
                <div class="d-flex align-items-center me-sm-4">
                    <label class="fs-sm text-light me-2 pe-1 text-nowrap" for="sorting1"><i
                            class="fi-arrows-sort mt-n1 me-2"></i>Sort by:</label>
                    @Html.DropDownList("products-orderby", Model.CatalogProductsModel.AvailableSortOptions, new { aria_label = T("Catalog.OrderBy.Label"), @class = "form-select form-select-light form-select-sm me-2 me-sm-4" })
                    <script asp-location="Footer">
                        $(function () {
                            var $orderByEl = $('#products-orderby');
                            $orderByEl.on('change', function () {
                                CatalogProducts.getProducts();
                            });

                            $(CatalogProducts).on('before', function (e) {
                                e.payload.urlBuilder
                                    .addParameter('orderby', $orderByEl.val());
                            });
                        });
                    </script>
                    <div class="d-none d-md-block border-end border-light" style="height: 1.25rem;"></div>
                    <div class="d-none d-sm-block fw-bold text-light opacity-70 text-nowrap ps-md-4">
                        <i class="fi-switch-horizontal me-2"></i><span class="align-middle">Compare (0)</span>
                    </div>
                </div>
                @if (Model.CatalogProductsModel.AvailableViewModes.Count > 1)
                {
                    <div class="d-none d-sm-flex">
                        @{
                            var gridMode = Model.CatalogProductsModel.AvailableViewModes[0];
                            var listMode = Model.CatalogProductsModel.AvailableViewModes[1];
                        }
                        <a class="nav-link nav-link-light px-2 @if (gridMode.Selected) { <text>active</text> }" href="#"
                           data-viewmode="@gridMode.Value" data-bs-toggle="tooltip" title="@gridMode.Text">
                            <i class="fi-grid"></i>
                        </a>
                        <a class="nav-link nav-link-light px-2 @if (listMode.Selected) { <text>active</text> }" href="#"
                           data-viewmode="@listMode.Value" data-bs-toggle="tooltip" title="@listMode.Text">
                            <i class="fi-list"></i>
                        </a>
                        <script asp-location="Footer">
                            $(function () {
                                var $viewModeEls = $('[data-viewmode]');
                                $viewModeEls.on('click', function () {
                                    if (!$(this).hasClass('active')) {
                                        $viewModeEls.toggleClass('active');
                                        CatalogProducts.getProducts();
                                    }
                                    return false;
                                });

                                $(CatalogProducts).on('before', function (e) {
                                    var $viewModeEl = $('[data-viewmode].active');
                                    if ($viewModeEl) {
                                        e.payload.urlBuilder
                                            .addParameter('viewmode', $viewModeEl.data('viewmode'));
                                    }
                                });
                            });
                        </script>
                    </div>
                }
            </div>
            <div>
                <div class="ajax-products-busy"></div>
                <div class="products-wrapper">
                    @await Html.PartialAsync("/Themes/SaljiDalje/Views/Catalog/_ProductsInGridOrLines.cshtml", Model.CatalogProductsModel)
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Filters sidebar toggle button (mobile)-->
<button class="btn btn-primary btn-sm w-100 rounded-0 fixed-bottom d-lg-none" type="button" data-bs-toggle="offcanvas"
        data-bs-target="#filters-sidebar"><i class="fi-filter me-2"></i>Filters
</button>
<!-- Vendor scrits: js libraries and plugins-->
@* <script src="Themes/SaljiDalje/Content/vendor/bootstrap/dist/js/bootstrap.bundle.min.js" asp-exclude-from-bundle="true"></script> *@
@* <script src="Themes/SaljiDalje/Content/vendor/simplebar/dist/simplebar.min.js" asp-exclude-from-bundle="true"></script> *@
@* <script src="Themes/SaljiDalje/Content/vendor/smooth-scroll/dist/smooth-scroll.polyfills.min.js" asp-exclude-from-bundle="true"></script> *@
<script src="Themes/SaljiDalje/Content/vendor/tiny-slider/dist/min/tiny-slider.js"
        asp-exclude-from-bundle="true"></script>
<script src="Themes/SaljiDalje/Content/vendor/nouislider/dist/nouislider.min.js"
        asp-exclude-from-bundle="true"></script>
<script src="Themes/SaljiDalje/Content/js/public.catalogproducts.saljidalje.js" asp-exclude-from-bundle="true"></script>
<script asp-location="Footer">
    $(function () {
        CatalogProducts.init({
            ajax: @Model.CatalogProductsModel.UseAjaxLoading.ToString().ToLowerInvariant(),
            browserPath: '@Context.Request.Path',
            fetchUrl: '@Html.Raw(Url.RouteUrl("GetCategoryProducts", new { categoryId = Model.Id }))'
        });

        addPagerHandlers();

        $(CatalogProducts).on('before', function () {
            var preloader = document.querySelector('.page-loading');
            preloader.style.opacity = 0.9;
            preloader.style.display = "block";
            preloader.classList.remove('active');
            preloader.classList.add('active');


        });
        $(CatalogProducts).on('loaded', function () {
            var preloader = document.querySelector('.page-loading');
            preloader.classList.remove('active');
            preloader.style.display = "none";
            carousel()
            addPagerHandlers();

            const element = document.querySelector('[data-total-number]');
            if (element != null) {
                const totalNumber = document.getElementById('total-number');
                totalNumber.textContent = element.dataset.totalNumber + " oglasa";
            } else {
                document.getElementById('total-number').textContent = 0 + " oglasa";
            }

        });
    });

    function addPagerHandlers() {
        $('[data-page]').on('click', function (e) {
            e.preventDefault();
            CatalogProducts.getProducts($(this).data('page'));
            return false;
        });
    }
</script>
<!-- Main theme script-->
@* <script src="Themes/SaljiDalje/Content/js/theme.min.js"></script> *@